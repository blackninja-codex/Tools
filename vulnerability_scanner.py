import requests
import re
import urlparse
from BeautifulSoup import BeautifulSoup

class Scanner:

	def __init__(self,url,ignore_links):
		self.session = requests.Session()
		self.target_url = url
		self.target_links = []
		self.links_to_ignore = ignore_links

	def extract_links_from(self,url):
		response = self.session.get(url)
		return re.findall('(?:href=")(.*?)"',response.content)

	def crawl(self,url=None):
		if url == None:
			url = self.target_url
		href_links = self.extract_links_from(url)

		for link in href_links:
			link = urlparse.urljoin(url,link)

			if "#" in link:
				link = link.split("#")[0]

			if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
				self.target_links.append(link)
				self.crawl(link)

	def extract_forms(self,url):
		response = self.session.get(url)
		parsed_html = BeautifulSoup(response.content)
		return parsed_html.findAll("form")

	def submit_form(self,form,value,url):
		action = form.get("action")
		post_url = urlparse.urljoin(url,action)
		method = form.get("method")
		
		inputs_list = form.findAll("input")
		post_data = {}

		for input in inputs_list:
			input_name = input.get("name")
			input_type = input.get("type")
			input_value = input.get("value")
			if input_type == "text":
				input_value = value

			post_data[input_name] = input_value
		if method == "post":
			return self.session.post(post_url,data=post_data)
		return self.session.get(post_url,params=post_data)

	def run_scanner(self):
		for link in self.target_links:
			forms = self.extract_forms(link)
			for form in forms:
				print "[+] Testing form in " + link
				is_vulnerable_to_xss = self.test_xss_in_form(form,link)
				if is_vulnerable_to_xss:
					print "--"*50
					print "[*****] XSS discovered in "+link+" in the following form:"
					print form
					print "--"*50

			if "=" in link:
				print "[+] Testing " + link
				if_vulnerable_to_xss = self.test_xss_in_link(link)
				if is_vulnerable_to_xss:
					print "--"*50
					print "[*****] Discovered XSS in " + link
					print link
					print "--"*50	

	def test_xss_in_link(self,url):
		xss_test_script = "<sCript>alert('test')</scriPt>"
		url = url.replace("=","="+ xss_test_script)
		response = self.session.get(url)
		return xss_test_script in response.content

	def test_xss_in_form(self,form,url):
		xss_test_script = "<sCript>alert('test')</scriPt>"
		response = self.submit_form(form,xss_test_script,url)
		return xss_test_script in response.content

def vulnerable(response):
	errors = {"quoted string not properly terminated","unclosed quotation mark after the character string","you have an error in your sql syntax;"}
		
	for error in errors:
		if error in response.content.decode().lower():
			return True
	return False

def sql_injection_scan(url):
	forms = extract_forms(url)
	print(f"[+] Detected {len(forms)} forms on {url}.")
		
	for form in forms:
		details = submit_form(form)
			
		for c in "\"'":
			data = {}
				
			for input_tag in details["inputs"]:
				if input_tag["type"] == "hidden" or input_tag["value"]:
					data[input_tag["name"]] = input_tag["value"] + c
				elif input_tag["type"] != "submit":
					data[input_tag["name"]] = f"test{c}"
			url = urljoin(url, form_details["action"])
				
			if details["method"] == "post":
				res = session.post(url, data=data)
			elif details["method"] == "get":
				res = session.get(url, params=data)
			if vulnerable(res):
				print("SQL Injection attack vulnerability detected in link:", url)
			else:
				print("No SQL Injection vulnerability detected")
				break

target_url = "http://192.168.44.101/dvwa/"
links_to_ignore = ["http://192.168.44.101/dvwa/logout.php"]
vuln_scanner = Scanner(target_url,links_to_ignore)

data_dict = {"username":"admin","password":"password","Login":"submit"}
vuln_scanner.session.post("http://192.168.44.101/dvwa/login.php",data=data_dict)

val = input("enter your choice: 1=XSS scan \n2 = Sqli scan")
if val==1:
	vuln_scanner.crawl()
	vuln_scanner.run_scanner()
elif val==2:
	sql_injection_scan(target_url)
else: 
	print("wrong choice")
	return
